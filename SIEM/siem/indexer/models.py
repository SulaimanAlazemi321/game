"""
Database Models for SIEM
Defines the structure for storing log data
"""

from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text, Float, Index
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime

Base = declarative_base()

class LogEntry(Base):
    """Model for storing parsed log entries"""
    __tablename__ = 'log_entries'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # Message content
    raw_message = Column(Text, nullable=False)
    message = Column(Text)
    
    # Source information
    source_ip = Column(String(45))  # Support IPv6
    source_port = Column(Integer)
    hostname = Column(String(255))
    
    # Syslog fields
    priority = Column(Integer)
    facility = Column(Integer)
    severity = Column(Integer)
    severity_name = Column(String(20))
    
    # Process information
    process = Column(String(255))
    pid = Column(Integer)
    appname = Column(String(255))
    
    # Timestamps
    timestamp = Column(String(50))  # Original timestamp from log
    received_at = Column(DateTime, default=datetime.utcnow)
    parsed_at = Column(DateTime)
    indexed_at = Column(DateTime, default=datetime.utcnow)
    
    # Parsing metadata
    pattern_matched = Column(String(50))
    
    # Create indexes for common queries
    __table_args__ = (
        Index('idx_severity', 'severity'),
        Index('idx_source_ip', 'source_ip'),
        Index('idx_hostname', 'hostname'),
        Index('idx_received_at', 'received_at'),
        Index('idx_indexed_at', 'indexed_at'),
    )
    
    def to_dict(self):
        """Convert model to dictionary"""
        return {
            'id': self.id,
            'raw_message': self.raw_message,
            'message': self.message,
            'source_ip': self.source_ip,
            'source_port': self.source_port,
            'hostname': self.hostname,
            'priority': self.priority,
            'facility': self.facility,
            'severity': self.severity,
            'severity_name': self.severity_name,
            'process': self.process,
            'pid': self.pid,
            'appname': self.appname,
            'timestamp': self.timestamp,
            'received_at': self.received_at.isoformat() if self.received_at else None,
            'parsed_at': self.parsed_at.isoformat() if self.parsed_at else None,
            'indexed_at': self.indexed_at.isoformat() if self.indexed_at else None,
            'pattern_matched': self.pattern_matched
        }

class Alert(Base):
    """Model for storing security alerts generated by rules"""
    __tablename__ = 'alerts'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # Alert details
    rule_id = Column(String(100), nullable=False)
    rule_name = Column(String(255))
    severity = Column(String(20))
    description = Column(Text)
    
    # Related log entry
    log_entry_id = Column(Integer)
    
    # Alert metadata
    created_at = Column(DateTime, default=datetime.utcnow)
    acknowledged = Column(Integer, default=0)  # 0=false, 1=true
    acknowledged_by = Column(String(100))
    acknowledged_at = Column(DateTime)
    
    # Additional context
    source_ip = Column(String(45))
    destination_ip = Column(String(45))
    
    # Create indexes
    __table_args__ = (
        Index('idx_rule_id', 'rule_id'),
        Index('idx_created_at', 'created_at'),
        Index('idx_acknowledged', 'acknowledged'),
    )
    
    def to_dict(self):
        """Convert model to dictionary"""
        return {
            'id': self.id,
            'rule_id': self.rule_id,
            'rule_name': self.rule_name,
            'severity': self.severity,
            'description': self.description,
            'log_entry_id': self.log_entry_id,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'acknowledged': bool(self.acknowledged),
            'acknowledged_by': self.acknowledged_by,
            'acknowledged_at': self.acknowledged_at.isoformat() if self.acknowledged_at else None,
            'source_ip': self.source_ip,
            'destination_ip': self.destination_ip
        }

def init_database(db_path):
    """Initialize database and create tables"""
    engine = create_engine(f'sqlite:///{db_path}', echo=False)
    Base.metadata.create_all(engine)
    return engine

def get_session(engine):
    """Get database session"""
    Session = sessionmaker(bind=engine)
    return Session() 